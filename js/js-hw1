'use strict';

// const friends = [
//     { name: "Ross", online: false },
//     { name: "Joey", online: true },
//     { name: "Chandler", online: false },
//     { name: "Phoebe", online: true },
//     { name: "Monica", online: true },
//     { name: "Rachel", online: false },
// ];

// function findByName(allFriends, name) {
//     for (const friend of allFriends) {
//         if (friend.name.toLowerCase() === name.toLowerCase()) {
//             return friend;
//       }
        
//     }
//     return "Not found";
// }

// console.log(findByName(friends, "joey"));



// function getOnline(allFriends) {
//     const online = [];

//     for (const friend of allFriends) {
      
//         if (friend.online) {
//             online.push(friend);
//         }
            
        
//     }
//     return online;
// }

// console.log(getOnline(friends));

// const stones = [
//     { name: "Cmaragd", price: 1300, quantity: 4 },
//     { name: "Diamant", price: 2700, quantity: 5 },
//     { name: "Sapfir", price: 400, quantity: 7 },
//     { name: "Shebin", price: 200, quantity: 2 },
// ];

// function calcTotalPrice(arr, stoneName) {
//     let sum = 0;

//     for(const item of arr) {

//         if(item.name === stoneName) {
//             sum += item.price * item.quantity;
//         }
//     }

//     return sum;
// }

// console.log(calcTotalPrice(stones, "Shebin"));



// const playlist = {
//     name: "My playlist",
//     rating: 5,
//     tracks: ["track-1", "track-2", "track-3"],
//     changeName(newName) {
//         this.name = newName;
//     },
//     changeRating(newRating) {
//         this.rating = newRating;
//     },
//     addTrack(newTrack) {
//         this.tracks.push(newTrack);
//     },
//     getTracksCount() {
//         return this.tracks.length;
//     }
    
// }


// playlist.changeName("Ruslan playlist");
// playlist.changeRating(7);
// playlist.addTrack("track-4");

// console.log(playlist.getTracksCount());

// console.log(playlist);

// rest
// function foo(...lalala) {
//     console.log(lalala);
    
// }

// foo({ x: 1, y: 2 });

//spread

// const temps = [18, 14, 12, 21, 17, 29, 24];

// console.log(Math.max(...temps));
// console.log(Math.min(...temps));

// const a = [{ x: 1 }, { y: 2 }, { q: 3 }];
// const b = [...a];

// console.log(a === b);// false

// console.log(b);

// const objA = { x: 1, y: 2 };
// const objB = { x: 0, q: 3 };

//  const objC = {
//      ...objA,
//     x: 10,
//      ...objB,
//      y: 20
//  };

//  console.log(objC);

// ------------------------------------ 4

/*
 * Типів транзакцій всього два.
 * Можна покласти чи зняти гроші з рахунку.
 */
const Transaction = {
  DEPOSIT: "deposit",
  WITHDRAW: "withdraw",
};
  
  /*
   * Кожна транзакція це об'єкт із властивостями: id, type та amount
   */
  
  const account = {
    // Поточний баланс рахунку
    balance: 0,
  
    // Історія транзакцій
    transactions: [],
  
    /*
     * Метод створює та повертає об'єкт транзакції.
     * Приймає суму та тип транзакції.
     */
    createTransaction(amount, type) {
      const obj = { id: amount, amount, type };
      return obj;
    },


  
    /*
     * Метод, що відповідає за додавання суми до балансу.
     * Приймає суму транзакції.
     * Викликає createTransaction для створення об'єкта транзакції
     * після чого додає його до історії транзакцій
     */
    deposit(amount) {
      this.balance += amount;
      const transaction = this.createTransaction(amount, Transaction.DEPOSIT);
      this.transactions.push(transaction);
    },
  
    /*
     * Метод, що відповідає за зняття суми з балансу.
     * Приймає суму транзакції.
     * Викликає createTransaction для створення об'єкта транзакції
     * після чого додає його до історії транзакцій.
     *
     * Якщо amount більше ніж поточний баланс, виводь повідомлення
     * про те, що зняття такої суми не можливе, недостатньо коштів.
     */
    withdraw(amount) {
      if(this.balance < amount) {
        console.log("Недостатня сумма");
        return;
      }

      this.balance -= amount;
      const transaction = this.createTransaction(amount, Transaction.WITHDRAW);
      this.transactions.push(transaction);
    },
  


    /*
     * Метод повертає поточний баланс
     */
    getBalance() {
      return this.balance;
    },
  
    /*
     * Метод шукає та повертає об'єкт транзакції по id
     */
    getTransactionDetails(id) {
      for(const item of this.transactions) {
        if(item.id === id) {
          return item;
        }
      }

      return "Not found"
    },
  
    /*
     * Метод повертає кількість коштів
     * певного типу транзакції з усієї історії транзакцій
     */
    getTransactionTotal(type) {
      let total = 0;

      for(const item of this.transactions) {
        if(item.type === type) {
          total += item.amount;
        }
      }

      return total;
    },
};
  

account.deposit(500);
account.deposit(100);

account.withdraw(200);

console.log(account.getBalance());
console.log(account.getTransactionDetails(2000));
console.log(account.getTransactionTotal(Transaction.WITHDRAW));



console.log(account);


